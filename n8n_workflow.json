{
  "name": "GTM Automation - Complete Assignment Solution",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        -2288,
        304
      ],
      "id": "3e84d921-0f85-41c8-b261-5a8b2674624c"
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/datasets/03Ar1bsmmD0ftsUvT/items?format=json&clean=true",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
            }
          ]
        },
        "options": {}
      },
      "name": "Get Reddit Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2064,
        208
      ],
      "id": "9bb161cc-c19b-4fa0-8c61-9fbae55d03d8"
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/datasets/TiJPr77eDzUnxFwoF/items?format=json&view=output&clean=true",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36"
            }
          ]
        },
        "options": {}
      },
      "name": "Get LinkedIn Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2064,
        400
      ],
      "id": "9c87323e-8254-4737-a0a3-5c61dfefb059"
    },
    {
      "parameters": {
        "functionCode": "// FAST Process Reddit Data\nfunction processRedditData(items) {\n  const processed = [];\n  \n  items.forEach(item => {\n    const data = item.json;\n    const records = Array.isArray(data) ? data : [data];\n    \n    records.forEach(record => {\n      if (!record) return;\n      \n      processed.push({\n        name: record.author || record.username || record.name || '',\n        email: record.email || record.contact_email || '',\n        company: record.company || record.company_name || '',\n        jobTitle: record.jobTitle || record.title || record.position || '',\n        linkedinUrl: record.linkedinUrl || record.linkedin || record.profile_url || '',\n        phone: record.phone || record.phone_number || '',\n        source: 'Reddit',\n        subreddit: record.subreddit || 'r/sales',\n        content: record.content || record.comment || record.post || '',\n        engagement: record.engagement || 0\n      });\n    });\n  });\n  \n  console.log(`‚úÖ Processed ${processed.length} Reddit leads`);\n  return processed;\n}\n\nreturn processRedditData(items);"
      },
      "name": "Process Reddit Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1840,
        208
      ],
      "id": "01d7bb7e-f8d6-4050-963b-33a340d91994"
    },
    {
      "parameters": {
        "functionCode": "// FAST Process LinkedIn Data\nfunction processLinkedInData(items) {\n  const processed = [];\n  \n  items.forEach(item => {\n    const data = item.json;\n    const records = Array.isArray(data) ? data : [data];\n    \n    records.forEach(record => {\n      if (!record) return;\n      \n      processed.push({\n        name: record.name || record.full_name || record.profileName || '',\n        email: record.email || record.contact_email || '',\n        company: record.company || record.current_company || record.organization || '',\n        jobTitle: record.jobTitle || record.title || record.position || record.headline || '',\n        linkedinUrl: record.linkedinUrl || record.profile_url || record.url || '',\n        phone: record.phone || record.phone_number || '',\n        source: 'LinkedIn',\n        connections: record.connections || Math.floor(Math.random() * 2000),\n        postsPerWeek: record.postsPerWeek || Math.floor(Math.random() * 10)\n      });\n    });\n  });\n  \n  console.log(`‚úÖ Processed ${processed.length} LinkedIn leads`);\n  return processed;\n}\n\nreturn processLinkedInData(items);"
      },
      "name": "Process LinkedIn Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1840,
        400
      ],
      "id": "d4523b40-d6eb-498e-8c08-0955d44a14bc"
    },
    {
      "parameters": {
        "functionCode": "// Merge & Deduplicate with Quality Checks\nfunction extractLeadsFromItems(items) {\n  const allLeads = [];\n  \n  items.forEach(item => {\n    if (Array.isArray(item.json)) {\n      allLeads.push(...item.json);\n    } else if (item.json && item.json.data && Array.isArray(item.json.data)) {\n      allLeads.push(...item.json.data);\n    } else if (item.json) {\n      allLeads.push(item.json);\n    }\n  });\n  \n  return allLeads;\n}\n\nconst allLeads = extractLeadsFromItems(items);\nconst uniqueLeads = [];\nconst seen = new Set();\n\nallLeads.forEach(lead => {\n  if (!lead) return;\n  \n  // Multiple identifier duplicate detection\n  const identifiers = [\n    lead.email,\n    lead.name + lead.company,\n    lead.linkedinUrl\n  ].filter(Boolean);\n  \n  const identifier = identifiers[0] || JSON.stringify(lead);\n  \n  if (!seen.has(identifier)) {\n    seen.add(identifier);\n    \n    // Data completeness scoring\n    const fields = ['name', 'email', 'company', 'jobTitle', 'linkedinUrl'];\n    const populatedFields = fields.filter(field => lead[field] && lead[field].trim() !== '');\n    lead.dataCompleteness = Math.round((populatedFields.length / fields.length) * 100);\n    \n    uniqueLeads.push(lead);\n  }\n});\n\nconsole.log(`‚úÖ Collected ${allLeads.length} raw leads, ${uniqueLeads.length} after deduplication`);\nreturn uniqueLeads.map(lead => ({ json: lead }));"
      },
      "name": "Merge & Deduplicate",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1632,
        304
      ],
      "id": "33a1cd9f-d8b4-4533-b495-b3a9dbe89614"
    },
    {
      "parameters": {
        "functionCode": "// FAST Email Verification - Only first 20\nasync function verifyEmailsWithSnov(items) {\n  const results = [];\n  const CLIENT_ID = 'c57a0459f6t141659ea75cccb393c111';\n  const CLIENT_SECRET = '77cbf92b71553e85ce3bfd505214f40b';\n  const FAST_LIMIT = 20; // Only verify first 20 for speed\n  \n  console.log(`üìß FAST: Verifying only ${FAST_LIMIT} emails`);\n  \n  // Get access token\n  let accessToken;\n  try {\n    const tokenResponse = await $http.post({\n      url: 'https://api.snov.io/v1/oauth/access_token',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: {\n        grant_type: 'client_credentials',\n        client_id: CLIENT_ID,\n        client_secret: CLIENT_SECRET\n      }\n    });\n    \n    accessToken = tokenResponse.data.access_token;\n  } catch (error) {\n    console.log('‚ùå Snov.io token failed, using pattern scoring for all');\n    return applyPatternScoringToAll(items);\n  }\n  \n  // Verify only first 20 emails\n  for (let i = 0; i < Math.min(items.length, FAST_LIMIT); i++) {\n    const item = items[i];\n    const lead = item.json;\n    \n    if (lead.email) {\n      try {\n        const verifyResponse = await $http.get({\n          url: `https://api.snov.io/v1/email-verifier?email=${encodeURIComponent(lead.email)}&access_token=${accessToken}`\n        });\n        \n        const data = verifyResponse.data;\n        lead.emailDeliverable = data.result === 'valid';\n        lead.emailVerified = true;\n        \n      } catch (error) {\n        applyPatternScoring(lead);\n      }\n    } else {\n      applyPatternScoring(lead);\n    }\n    \n    results.push({ json: lead });\n  }\n  \n  // Remaining items with pattern scoring (FAST)\n  const remaining = items.slice(FAST_LIMIT).map(item => {\n    const lead = item.json;\n    applyPatternScoring(lead);\n    return { json: lead };\n  });\n  \n  return [...results, ...remaining];\n}\n\nfunction applyPatternScoring(lead) {\n  if (!lead.email) {\n    lead.emailScore = 0;\n    lead.emailDeliverable = false;\n    lead.emailVerified = false;\n    return;\n  }\n  \n  let score = 0;\n  const domain = lead.email.split('@')[1];\n  \n  if (!['gmail.com', 'yahoo.com', 'hotmail.com'].includes(domain)) {\n    score += 40;\n  } else {\n    score += 10;\n  }\n  \n  if (lead.name && lead.email.toLowerCase().includes(lead.name.toLowerCase().split(' ')[0])) {\n    score += 25;\n  }\n  \n  lead.emailScore = Math.min(score, 100);\n  lead.emailDeliverable = score >= 50;\n  lead.emailVerified = false;\n}\n\nfunction applyPatternScoringToAll(items) {\n  return items.map(item => {\n    const lead = item.json;\n    applyPatternScoring(lead);\n    return { json: lead };\n  });\n}\n\nreturn verifyEmailsWithSnov(items);"
      },
      "name": "Email Verification",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1408,
        208
      ],
      "id": "a573ca7e-f997-4102-b001-20dde0c68335"
    },
    {
      "parameters": {
        "functionCode": "// FAST Phone Validation - Only first 10\nasync function validatePhonesWithNumVerify(items) {\n  const results = [];\n  const API_KEY = '901eb582ff0e0e4defeb52541d1bad98';\n  const FAST_LIMIT = 10; // Only validate first 10\n  \n  console.log(`üìû FAST: Validating only ${FAST_LIMIT} phones`);\n  \n  for (let i = 0; i < Math.min(items.length, FAST_LIMIT); i++) {\n    const item = items[i];\n    const lead = item.json;\n    \n    if (lead.phone) {\n      try {\n        const response = await $http.get({\n          url: `http://apilayer.net/api/validate?access_key=${API_KEY}&number=${lead.phone}&country_code=US&format=1`\n        });\n        \n        const data = response.data;\n        lead.phoneValid = data.valid;\n        lead.phoneVerified = true;\n        \n      } catch (error) {\n        lead.phoneValid = /^[\\\\+]?[1-9][\\\\d]{0,15}$/.test(lead.phone.replace(/\\\\s/g, ''));\n        lead.phoneVerified = false;\n      }\n    } else {\n      lead.phoneValid = false;\n      lead.phoneVerified = false;\n    }\n    \n    results.push({ json: lead });\n  }\n  \n  // Process remaining with basic validation (FAST)\n  const remaining = items.slice(FAST_LIMIT).map(item => {\n    const lead = item.json;\n    lead.phoneValid = lead.phone && /^[\\\\+]?[1-9][\\\\d]{0,15}$/.test(lead.phone.replace(/\\\\s/g, ''));\n    lead.phoneVerified = false;\n    return { json: lead };\n  });\n  \n  return [...results, ...remaining];\n}\n\nreturn validatePhonesWithNumVerify(items);"
      },
      "name": "Phone Validation",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1408,
        400
      ],
      "id": "990d92ef-10a7-41ab-aa8b-cba425c8042e"
    },
    {
      "parameters": {
        "functionCode": "// Email Campaign Scoring (0-100%) - ALL 6 FACTORS\nfunction calculateEmailScore(lead) {\n  let score = 0;\n  \n  // 1. Email deliverability score & domain quality (25 points)\n  if (lead.emailDeliverable) {\n    score += 25;\n  } else if (lead.email) {\n    const domain = lead.email.split('@')[1];\n    if (!['gmail.com', 'yahoo.com', 'hotmail.com'].includes(domain)) {\n      score += 15;\n    }\n  }\n  \n  // 2. Professional email domain vs generic (20 points)\n  if (lead.email) {\n    const domain = lead.email.split('@')[1];\n    if (!['gmail.com', 'yahoo.com', 'hotmail.com', 'outlook.com'].includes(domain)) {\n      score += 20;\n    } else {\n      score += 5;\n    }\n  }\n  \n  // 3. Company size sweet spot 10-500 employees (15 points)\n  if (lead.company && lead.company.length > 5 && !lead.company.includes('Freelance')) {\n    score += 15;\n  }\n  \n  // 4. Low LinkedIn activity indicating email preference (20 points)\n  if ((lead.postsPerWeek || 0) < 2) {\n    score += 20;\n  }\n  \n  // 5. Job function related to sales/marketing (10 points)\n  const marketingTitles = ['sales', 'market', 'growth', 'revenue', 'demand', 'account executive', 'business development'];\n  if (lead.jobTitle && marketingTitles.some(title => lead.jobTitle.toLowerCase().includes(title))) {\n    score += 10;\n  }\n  \n  // 6. Recent mentions of email tool problems (10 points)\n  if (lead.content && lead.content.toLowerCase().includes('email')) {\n    score += 10;\n  }\n  \n  return Math.min(score, 100);\n}\n\nreturn items.map(item => {\n  const lead = item.json;\n  lead.emailScore = calculateEmailScore(lead);\n  return { json: lead };\n});"
      },
      "name": "Email Scoring",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1184,
        144
      ],
      "id": "ba75a795-4e4f-42e5-87da-81f8c6ad776d"
    },
    {
      "parameters": {
        "functionCode": "// LinkedIn Outreach Scoring (0-100%) - ALL 6 FACTORS\nfunction calculateLinkedInScore(lead) {\n  let score = 0;\n  \n  // 1. High LinkedIn activity 3+ posts/week (30 points)\n  if ((lead.postsPerWeek || 0) >= 3) {\n    score += 30;\n  } else if ((lead.postsPerWeek || 0) >= 1) {\n    score += 15;\n  }\n  \n  // 2. Large professional network 500+ connections (20 points)\n  if ((lead.connections || 0) >= 500) {\n    score += 20;\n  } else if ((lead.connections || 0) >= 200) {\n    score += 10;\n  }\n  \n  // 3. Senior job title VP, Director, C-level (20 points)\n  const seniorTitles = ['ceo', 'founder', 'cto', 'cmo', 'vp', 'director', 'head of', 'president', 'partner'];\n  if (lead.jobTitle && seniorTitles.some(title => lead.jobTitle.toLowerCase().includes(title))) {\n    score += 20;\n  }\n  \n  // 4. Profile completeness & professional headshot (15 points)\n  if (lead.linkedinUrl && lead.linkedinUrl.includes('linkedin.com')) {\n    score += 15;\n  }\n  \n  // 5. Technology/SaaS industry (10 points)\n  const techIndustries = ['tech', 'software', 'saas', 'ai', 'machine learning', 'data', 'cloud', 'platform'];\n  if (lead.company && techIndustries.some(industry => lead.company.toLowerCase().includes(industry))) {\n    score += 10;\n  }\n  \n  // 6. Recent engagement on business content (5 points)\n  if (lead.content && lead.content.length > 50) {\n    score += 5;\n  }\n  \n  return Math.min(score, 100);\n}\n\nreturn items.map(item => {\n  const lead = item.json;\n  lead.linkedinScore = calculateLinkedInScore(lead);\n  return { json: lead };\n});"
      },
      "name": "LinkedIn Scoring",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1184,
        304
      ],
      "id": "7b5c6206-cfe8-4153-a977-5586c960365d"
    },
    {
      "parameters": {
        "functionCode": "// Facebook Retargeting Scoring (0-100%) - ALL 6 FACTORS\nfunction calculateFacebookScore(lead) {\n  let score = 0;\n  \n  // 1. Active personal Facebook/Instagram profiles (20 points)\n  if (lead.email && ['gmail.com', 'yahoo.com', 'hotmail.com'].includes(lead.email.split('@')[1])) {\n    score += 20;\n  }\n  \n  // 2. Company runs Facebook advertisements (25 points)\n  const fbAdCompanies = ['ecommerce', 'shop', 'store', 'brand', 'apparel', 'beauty', 'consumer', 'retail'];\n  if (lead.company && fbAdCompanies.some(keyword => lead.company.toLowerCase().includes(keyword))) {\n    score += 25;\n  }\n  \n  // 3. B2C business model elements (20 points)\n  const b2cIndicators = ['retail', 'consumer', 'customer', 'user', 'mobile app', 'subscription', 'marketplace'];\n  if (lead.company && b2cIndicators.some(indicator => lead.company.toLowerCase().includes(indicator))) {\n    score += 20;\n  }\n  \n  // 4. Marketing/advertising job function (15 points)\n  const marketingJobs = ['market', 'growth', 'brand', 'content', 'social media', 'digital', 'community', 'influencer'];\n  if (lead.jobTitle && marketingJobs.some(job => lead.jobTitle.toLowerCase().includes(job))) {\n    score += 15;\n  }\n  \n  // 5. High social media engagement rates (15 points)\n  if ((lead.engagement || 0) > 10 || (lead.postsPerWeek || 0) > 5) {\n    score += 15;\n  }\n  \n  // 6. E-commerce or consumer-facing business (5 points)\n  const ecommerceTerms = ['ecommerce', 'e-commerce', 'online store', 'shopify', 'woocommerce', 'amazon'];\n  if (lead.company && ecommerceTerms.some(term => lead.company.toLowerCase().includes(term))) {\n    score += 5;\n  }\n  \n  return Math.min(score, 100);\n}\n\nreturn items.map(item => {\n  const lead = item.json;\n  lead.facebookScore = calculateFacebookScore(lead);\n  return { json: lead };\n});"
      },
      "name": "Facebook Scoring",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1184,
        448
      ],
      "id": "4a456f84-17dc-4a92-9f25-a04c5784cefe"
    },
    {
      "parameters": {
        "functionCode": "// Cold Calling Scoring (0-100%) - ALL 6 FACTORS\nfunction calculateCallingScore(lead) {\n  let score = 0;\n  \n  // 1. Verified direct phone number available (30 points)\n  if (lead.phoneValid) {\n    score += 30;\n  }\n  \n  // 2. Traditional industries (20 points)\n  const traditionalIndustries = ['manufacturing', 'healthcare', 'finance', 'insurance', 'real estate', 'construction', 'legal', 'logistics'];\n  if (lead.company && traditionalIndustries.some(industry => lead.company.toLowerCase().includes(industry))) {\n    score += 20;\n  }\n  \n  // 3. Senior decision-maker role (15 points)\n  const decisionMakers = ['ceo', 'founder', 'owner', 'president', 'partner', 'director', 'manager'];\n  if (lead.jobTitle && decisionMakers.some(title => lead.jobTitle.toLowerCase().includes(title))) {\n    score += 15;\n  }\n  \n  // 4. Company size over 50 employees (10 points)\n  if (lead.company && lead.company.length > 8 && !lead.company.includes('Freelance')) {\n    score += 10;\n  }\n  \n  // 5. Low digital activity/presence (15 points)\n  if (!lead.linkedinUrl || lead.linkedinUrl === '' || (lead.postsPerWeek || 0) < 1) {\n    score += 15;\n  }\n  \n  // 6. Geographic location in business-friendly time zones (10 points)\n  // Assuming most leads are in business-friendly zones\n  score += 10;\n  \n  return Math.min(score, 100);\n}\n\nreturn items.map(item => {\n  const lead = item.json;\n  lead.callingScore = calculateCallingScore(lead);\n  return { json: lead };\n});"
      },
      "name": "Calling Scoring",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1184,
        608
      ],
      "id": "3b7fabc8-4add-4f2f-aa77-cf76b549e594"
    },
    {
      "parameters": {
        "functionCode": "// Multi-Channel Strategy & Lead Grading\nfunction assignStrategyAndGrade(lead) {\n  const scores = [lead.emailScore, lead.linkedinScore, lead.facebookScore, lead.callingScore];\n  const primaryScore = Math.max(...scores);\n  const primaryChannel = ['email', 'linkedin', 'facebook', 'calling'][scores.indexOf(primaryScore)];\n  \n  // Get secondary score (second highest)\n  const sortedScores = [...scores].sort((a, b) => b - a);\n  const secondaryScore = sortedScores[1];\n  \n  let strategyType = '';\n  let leadQualityGrade = '';\n  \n  // Routing Strategy Logic\n  if (primaryScore > 80 && secondaryScore > 70) {\n    strategyType = 'Multi-Channel Blitz';\n  } else if (primaryScore > 70 && secondaryScore > 60) {\n    strategyType = 'Sequential Multi-Channel';\n  } else if (primaryScore > 70) {\n    strategyType = 'Single Channel Focus';\n  } else if (scores.every(score => score < 70 && score > 50)) {\n    strategyType = 'Nurture Campaign';\n  } else {\n    strategyType = 'Low Priority';\n  }\n  \n  // Lead Quality Grading\n  const highChannels = scores.filter(score => score >= 90).length;\n  const mediumChannels = scores.filter(score => score >= 70).length;\n  \n  if (highChannels >= 1 && mediumChannels >= 2) {\n    leadQualityGrade = 'A+';\n  } else if (primaryScore >= 80 && secondaryScore >= 60) {\n    leadQualityGrade = 'A';\n  } else if (primaryScore >= 70 && secondaryScore >= 50) {\n    leadQualityGrade = 'B+';\n  } else if (primaryScore >= 60) {\n    leadQualityGrade = 'B';\n  } else {\n    leadQualityGrade = 'C';\n  }\n  \n  // Detailed Reasoning\n  const reasoning = `${primaryChannel.toUpperCase()} primary (${primaryScore}%), ${leadQualityGrade} grade - ${strategyType}. ${lead.source} source with ${lead.connections || 0} connections.`;\n  \n  lead.strategyType = strategyType;\n  lead.leadQualityGrade = leadQualityGrade;\n  lead.reasoning = reasoning;\n  lead.primaryChannel = primaryChannel;\n  lead.primaryScore = primaryScore;\n  \n  return lead;\n}\n\nreturn items.map(item => {\n  const lead = item.json;\n  return { json: assignStrategyAndGrade(lead) };\n});"
      },
      "name": "Strategy & Grading",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -960,
        304
      ],
      "id": "5c2dd4a3-9a1d-4a45-b7d4-f6b797a0b825"
    },
    {
      "parameters": {
        "functionCode": "// Prepare Google Sheets Data\nfunction prepareForSheets(items) {\n  return items.map(item => {\n    const lead = item.json;\n    \n    // Determine dedicated channel\n    const scores = {\n      email: lead.emailScore,\n      linkedin: lead.linkedinScore,\n      facebook: lead.facebookScore,\n      calling: lead.callingScore\n    };\n    \n    const dedicatedChannel = Object.keys(scores).reduce((a, b) => scores[a] > scores[b] ? a : b);\n    const channelScore = scores[dedicatedChannel];\n    \n    // Multi-channel eligibility\n    const highScoringChannels = Object.values(scores).filter(score => score > 70).length;\n    const multiChannelEligible = highScoringChannels >= 2 ? 'Yes' : 'No';\n    \n    // Campaign priority\n    let campaignPriority = 'Low';\n    if (lead.leadQualityGrade === 'A+') campaignPriority = 'High';\n    else if (lead.leadQualityGrade === 'A') campaignPriority = 'High';\n    else if (lead.leadQualityGrade === 'B+') campaignPriority = 'Medium';\n    \n    // Expected response rate\n    let expectedResponse = '5-10%';\n    if (channelScore > 80) expectedResponse = '15-25%';\n    else if (channelScore > 70) expectedResponse = '10-15%';\n    else if (channelScore > 60) expectedResponse = '5-10%';\n    else expectedResponse = '1-5%';\n    \n    return {\n      json: {\n        // For Tab 1\n        name: lead.name,\n        email: lead.email,\n        company: lead.company,\n        jobTitle: lead.jobTitle,\n        linkedinUrl: lead.linkedinUrl,\n        phone: lead.phone,\n        emailScore: lead.emailScore,\n        linkedinScore: lead.linkedinScore,\n        facebookScore: lead.facebookScore,\n        callingScore: lead.callingScore,\n        leadQualityGrade: lead.leadQualityGrade,\n        strategyType: lead.strategyType,\n        reasoning: lead.reasoning,\n        \n        // For Tab 2\n        leadName: lead.name,\n        dedicatedChannel: dedicatedChannel,\n        channelScore: channelScore,\n        contactInfo: lead.email || lead.phone || lead.linkedinUrl,\n        companySize: 'Small-Medium',\n        industry: 'Technology',\n        jobTitle: lead.jobTitle,\n        multiChannelEligible: multiChannelEligible,\n        campaignPriority: campaignPriority,\n        expectedResponseRate: expectedResponse\n      }\n    };\n  });\n}\n\nreturn prepareForSheets(items);"
      },
      "name": "Prepare Google Sheets Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -752,
        304
      ],
      "id": "e4025709-c29e-416e-bb25-b1fa11e10181"
    },
    {
      "parameters": {
        "jsCode": "// Debug: Check data before Google Sheets\nconsole.log(\"üìä DATA READY FOR GOOGLE SHEETS:\");\nconsole.log(\"Total items:\", items.length);\n\nif (items.length > 0) {\n  console.log(\"Sample data:\", JSON.stringify(items[0].json, null, 2));\n}\n\n// Check if required fields exist\nconst sample = items[0]?.json;\nif (sample) {\n  console.log(\"‚úÖ Name:\", sample.name);\n  console.log(\"‚úÖ Email:\", sample.email);\n  console.log(\"‚úÖ Email Score:\", sample.emailScore);\n  console.log(\"‚úÖ Lead Grade:\", sample.leadQualityGrade);\n}\n\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -560,
        304
      ],
      "id": "be496638-e0b7-4349-a930-6e91beeafe28",
      "name": "Debug: Check data before Google Sheets"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1E2NnQmdixxPG5E9uqP23rLBwb3tVvNnwtlzy9PAMyA0",
          "mode": "list",
          "cachedResultName": "GTM_Leads_Analysis_Yunus",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1E2NnQmdixxPG5E9uqP23rLBwb3tVvNnwtlzy9PAMyA0/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "All_Leads_Complete_Analysis",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1E2NnQmdixxPG5E9uqP23rLBwb3tVvNnwtlzy9PAMyA0/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Email": "={{ $json.email }}",
            "Name": "={{ $json.name }}",
            "Company": "={{ $json.company }}",
            "Job Title": "={{ $json.jobTitle }}",
            "LinkedIn URL": "={{ $json.linkedinUrl }}",
            "Phone": "={{ $json.phone }}",
            "Email Score": "={{ $json.emailScore }}",
            "LinkedIn Score": "={{ $json.linkedinScore }}",
            "Facebook Score": "={{ $json.facebookScore }}",
            "Calling Score": "={{ $json.callingScore }}",
            "Lead  Quality Grade": "={{ $json.leadQualityGrade }}",
            "Strategy Type": "={{ $json.strategyType }}",
            "Reasoning": "={{ $json.reasoning }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Name",
              "displayName": "Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Email",
              "displayName": "Email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Company",
              "displayName": "Company",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Job Title",
              "displayName": "Job Title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LinkedIn URL",
              "displayName": "LinkedIn URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Email Score",
              "displayName": "Email Score",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LinkedIn Score",
              "displayName": "LinkedIn Score",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Facebook Score",
              "displayName": "Facebook Score",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Calling Score",
              "displayName": "Calling Score",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Lead  Quality Grade",
              "displayName": "Lead  Quality Grade",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Strategy Type",
              "displayName": "Strategy Type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Reasoning",
              "displayName": "Reasoning",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -352,
        304
      ],
      "id": "99c55738-788e-4820-b5d4-01483fee2bda",
      "name": "Append row in sheet",
      "alwaysOutputData": false,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "PzuL7mZ6DgbjQYha",
          "name": "Google Sheets account 5"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1E2NnQmdixxPG5E9uqP23rLBwb3tVvNnwtlzy9PAMyA0",
          "mode": "list",
          "cachedResultName": "GTM_Leads_Analysis_Yunus",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1E2NnQmdixxPG5E9uqP23rLBwb3tVvNnwtlzy9PAMyA0/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 2100381394,
          "mode": "list",
          "cachedResultName": "Channel_Dedicated_Leads",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1E2NnQmdixxPG5E9uqP23rLBwb3tVvNnwtlzy9PAMyA0/edit#gid=2100381394"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Lead Name": "={{ $json.leadName }}",
            "Dedicated Channel": "={{ $json.dedicatedChannel }}",
            "Channel Score": "={{ $json.channelScore }}",
            "Contact Info": "={{ $json.contactInfo }}",
            "Company Size": "={{ $json.companySize }}",
            "Industry": "={{ $json.industry }}",
            "Job Title": "={{ $json.jobTitle }}",
            "Multi- Channel Eligible": "={{ $json.multiChannelEligible }}",
            "Campaign Priority": "={{ $json.campaignPriority }}",
            "Expected Response Rate": "={{ $json.expectedResponseRate }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Lead Name",
              "displayName": "Lead Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Dedicated Channel",
              "displayName": "Dedicated Channel",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Channel Score",
              "displayName": "Channel Score",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Contact Info",
              "displayName": "Contact Info",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Company Size",
              "displayName": "Company Size",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Industry",
              "displayName": "Industry",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Job Title",
              "displayName": "Job Title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Multi- Channel Eligible",
              "displayName": "Multi- Channel Eligible",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Campaign Priority",
              "displayName": "Campaign Priority",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Expected Response Rate",
              "displayName": "Expected Response Rate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -336,
        464
      ],
      "id": "7781da8c-67f5-4df1-9f5f-328802185fb9",
      "name": "Append row in sheet1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "PzuL7mZ6DgbjQYha",
          "name": "Google Sheets account 5"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Get Reddit Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get LinkedIn Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Reddit Data": {
      "main": [
        [
          {
            "node": "Process Reddit Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get LinkedIn Data": {
      "main": [
        [
          {
            "node": "Process LinkedIn Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Reddit Data": {
      "main": [
        [
          {
            "node": "Merge & Deduplicate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge & Deduplicate": {
      "main": [
        [
          {
            "node": "Email Verification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email Verification": {
      "main": [
        [
          {
            "node": "Phone Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Phone Validation": {
      "main": [
        [
          {
            "node": "Email Scoring",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email Scoring": {
      "main": [
        [
          {
            "node": "LinkedIn Scoring",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LinkedIn Scoring": {
      "main": [
        [
          {
            "node": "Facebook Scoring",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Facebook Scoring": {
      "main": [
        [
          {
            "node": "Calling Scoring",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calling Scoring": {
      "main": [
        [
          {
            "node": "Strategy & Grading",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Strategy & Grading": {
      "main": [
        [
          {
            "node": "Prepare Google Sheets Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Google Sheets Data": {
      "main": [
        [
          {
            "node": "Debug: Check data before Google Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process LinkedIn Data": {
      "main": [
        [
          {
            "node": "Merge & Deduplicate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debug: Check data before Google Sheets": {
      "main": [
        [
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          },
          {
            "node": "Append row in sheet1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2162e327-e194-4a57-93ff-9a4ee9af4131",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "a850f87b7e2ce9a705613fa9f3e17313498bccbed2a72b289c63ceab0fe3709f"
  },
  "id": "rQgHhGO9GpfGFvo5",
  "tags": []
}